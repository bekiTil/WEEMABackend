# Generated by Django 5.1.4 on 2025-05-03 08:49

import django.contrib.postgres.fields
import django.db.models.deletion
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("cluster_management", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="AnnualChildrenStatus",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "number_of_children",
                    models.IntegerField(default=0, verbose_name="Number of Children"),
                ),
                (
                    "child_1_name",
                    models.CharField(blank=True, max_length=100, null=True),
                ),
                (
                    "child_1_gender",
                    models.CharField(
                        blank=True,
                        choices=[("Male", "Male"), ("Female", "Female")],
                        max_length=10,
                        null=True,
                    ),
                ),
                ("child_1_age", models.IntegerField(blank=True, null=True)),
                (
                    "child_1_school_status",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("enrolled", "Enrolled"),
                            ("not_enrolled", "Not Enrolled"),
                            ("dropped_out", "Dropped Out"),
                            ("graduated", "Graduated"),
                        ],
                        max_length=20,
                        null=True,
                    ),
                ),
                (
                    "child_2_name",
                    models.CharField(blank=True, max_length=100, null=True),
                ),
                (
                    "child_2_gender",
                    models.CharField(
                        blank=True,
                        choices=[("Male", "Male"), ("Female", "Female")],
                        max_length=10,
                        null=True,
                    ),
                ),
                ("child_2_age", models.IntegerField(blank=True, null=True)),
                (
                    "child_2_school_status",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("enrolled", "Enrolled"),
                            ("not_enrolled", "Not Enrolled"),
                            ("dropped_out", "Dropped Out"),
                            ("graduated", "Graduated"),
                        ],
                        max_length=20,
                        null=True,
                    ),
                ),
                (
                    "child_3_name",
                    models.CharField(blank=True, max_length=100, null=True),
                ),
                (
                    "child_3_gender",
                    models.CharField(
                        blank=True,
                        choices=[("Male", "Male"), ("Female", "Female")],
                        max_length=10,
                        null=True,
                    ),
                ),
                ("child_3_age", models.IntegerField(blank=True, null=True)),
                (
                    "child_3_school_status",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("enrolled", "Enrolled"),
                            ("not_enrolled", "Not Enrolled"),
                            ("dropped_out", "Dropped Out"),
                            ("graduated", "Graduated"),
                        ],
                        max_length=20,
                        null=True,
                    ),
                ),
                (
                    "child_4_name",
                    models.CharField(blank=True, max_length=100, null=True),
                ),
                (
                    "child_4_gender",
                    models.CharField(
                        blank=True,
                        choices=[("Male", "Male"), ("Female", "Female")],
                        max_length=10,
                        null=True,
                    ),
                ),
                ("child_4_age", models.IntegerField(blank=True, null=True)),
                (
                    "child_4_school_status",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("enrolled", "Enrolled"),
                            ("not_enrolled", "Not Enrolled"),
                            ("dropped_out", "Dropped Out"),
                            ("graduated", "Graduated"),
                        ],
                        max_length=20,
                        null=True,
                    ),
                ),
                (
                    "child_5_name",
                    models.CharField(blank=True, max_length=100, null=True),
                ),
                (
                    "child_5_gender",
                    models.CharField(
                        blank=True,
                        choices=[("Male", "Male"), ("Female", "Female")],
                        max_length=10,
                        null=True,
                    ),
                ),
                ("child_5_age", models.IntegerField(blank=True, null=True)),
                (
                    "child_5_school_status",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("enrolled", "Enrolled"),
                            ("not_enrolled", "Not Enrolled"),
                            ("dropped_out", "Dropped Out"),
                            ("graduated", "Graduated"),
                        ],
                        max_length=20,
                        null=True,
                    ),
                ),
                (
                    "member",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="children_of_members",
                        to="cluster_management.member",
                    ),
                ),
            ],
            options={"abstract": False,},
        ),
        migrations.CreateModel(
            name="AnnualData",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "education_level",
                    models.CharField(
                        choices=[
                            ("No literacy", "No literacy"),
                            (
                                "No formal education but read and write",
                                "No formal education but read and write",
                            ),
                            ("Completed primary school", "Completed primary school"),
                            (
                                "Completed secondary school",
                                "Completed secondary school",
                            ),
                            (
                                "Completed teritiary education",
                                "Completed teritiary education",
                            ),
                        ],
                        max_length=100,
                    ),
                ),
                (
                    "marital_status",
                    models.CharField(
                        choices=[
                            ("single", "Single"),
                            ("married", "Married"),
                            ("divorced", "Divorced"),
                            ("widowed", "Widowed"),
                        ],
                        max_length=50,
                    ),
                ),
                ("family_size", models.IntegerField()),
                ("household_size", models.IntegerField()),
                ("total_savings", models.DecimalField(decimal_places=2, max_digits=10)),
                ("loan_rounds_taken", models.IntegerField()),
                (
                    "estimated_value_of_household_assets",
                    models.DecimalField(decimal_places=2, max_digits=15),
                ),
                (
                    "household_decision_making",
                    models.CharField(
                        choices=[
                            ("informed", "Informed"),
                            ("consulted", "Consulted"),
                            ("consent", "Consent"),
                        ],
                        max_length=50,
                        verbose_name="Household Decision Making",
                    ),
                ),
                (
                    "community_decision_making",
                    models.CharField(
                        choices=[
                            ("informed", "Informed"),
                            ("consulted", "Consulted"),
                            ("consent", "Consent"),
                        ],
                        max_length=50,
                        verbose_name="Community Decision Making",
                    ),
                ),
                ("mortality_children_under_5", models.IntegerField()),
                ("mortality_other_household_members", models.IntegerField()),
                (
                    "housing",
                    models.CharField(
                        choices=[
                            ("metal_sheet", "Metal Sheet"),
                            ("wood", "Wood"),
                            ("mud", "Mud"),
                            ("bricks", "Bricks"),
                            ("concrete", "Concrete"),
                            ("others", "Others"),
                        ],
                        max_length=50,
                    ),
                ),
                (
                    "have_latrine",
                    models.BooleanField(default=False, verbose_name="Have Latrine?"),
                ),
                (
                    "electricity",
                    models.BooleanField(default=False, verbose_name="Electricity?"),
                ),
                (
                    "drinking_water",
                    models.CharField(
                        choices=[
                            ("piped_inside", "Piped Water Inside the House"),
                            ("piped_outside", "Piped Water Outside the House"),
                            ("water_point", "Water Point"),
                            ("protected_well", "Protected Well"),
                            ("unprotected_well", "Unprotected Well"),
                            ("river_stream", "River/Stream"),
                            ("other", "Other (Specify)"),
                        ],
                        max_length=50,
                        verbose_name="Drinking Water Source",
                    ),
                ),
                (
                    "floor_material",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("mud_dung", "Mud/Dung"),
                            ("bamboo_reed", "Bamboo/Reed"),
                            ("wood_planks", "Wood planks"),
                            ("parquet", "Parquet or polished wood"),
                            ("cement_screed", "Cement screed"),
                            ("plastic_tiles", "Plastic tiles"),
                            ("cement_tiles", "Cement tiles"),
                            ("brick_tiles", "Brick tiles"),
                            ("ceramic_marble_tiles", "Ceramic/Marble tiles"),
                            ("other", "Other"),
                        ],
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "main_light_source",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("electricity_private", "Electricity meter - Private"),
                            ("electricity_shared", "Electricity meter - Shared"),
                            ("generator", "Electricity from generator"),
                            ("solar", "Solar energy"),
                            ("biogas", "Bio-gas"),
                            (
                                "flashlight_rechargeable",
                                "Flashlight, Rechargeable battery",
                            ),
                            ("lamp", "Lantern, Lamp"),
                            ("flashlight_regular", "Flashlight, Regular batteries"),
                            ("lantern_covered", "Lantern, covered flame"),
                            ("lantern_uncovered", "Lantern, uncovered flame"),
                            ("candle", "Candle/Wax"),
                            ("firewood", "Firewood"),
                            ("other", "Other"),
                        ],
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "consumed_tomatoes",
                    models.CharField(
                        blank=True,
                        choices=[("yes", "Yes"), ("no", "No")],
                        max_length=10,
                        null=True,
                    ),
                ),
                (
                    "consumed_potatoes",
                    models.CharField(
                        blank=True,
                        choices=[("yes", "Yes"), ("no", "No")],
                        max_length=10,
                        null=True,
                    ),
                ),
                (
                    "consumed_tea",
                    models.CharField(
                        blank=True,
                        choices=[("yes", "Yes"), ("no", "No")],
                        max_length=10,
                        null=True,
                    ),
                ),
                (
                    "bought_soap",
                    models.CharField(
                        blank=True,
                        choices=[("yes", "Yes"), ("no", "No")],
                        max_length=10,
                        null=True,
                    ),
                ),
                (
                    "bought_charcoal",
                    models.CharField(
                        blank=True,
                        choices=[("yes", "Yes"), ("no", "No")],
                        max_length=10,
                        null=True,
                    ),
                ),
                (
                    "hunger_no_food",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("never", "Never"),
                            ("rarely", "Rarely"),
                            ("sometimes", "Sometimes"),
                            ("often", "Often"),
                        ],
                        max_length=10,
                        null=True,
                    ),
                ),
                (
                    "hunger_sleep_hungry",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("never", "Never"),
                            ("rarely", "Rarely"),
                            ("sometimes", "Sometimes"),
                            ("often", "Often"),
                        ],
                        max_length=10,
                        null=True,
                    ),
                ),
                (
                    "hunger_whole_day_night",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("never", "Never"),
                            ("rarely", "Rarely"),
                            ("sometimes", "Sometimes"),
                            ("often", "Often"),
                        ],
                        max_length=10,
                        null=True,
                    ),
                ),
                (
                    "confident_public_speaking",
                    models.CharField(
                        blank=True,
                        choices=[("yes", "Yes"), ("no", "No")],
                        max_length=10,
                        null=True,
                    ),
                ),
                (
                    "future_goals",
                    models.CharField(
                        blank=True,
                        choices=[("yes", "Yes"), ("no", "No")],
                        max_length=10,
                        null=True,
                    ),
                ),
                (
                    "participate_household_decisions",
                    models.CharField(
                        blank=True,
                        choices=[("yes", "Yes"), ("no", "No")],
                        max_length=10,
                        null=True,
                    ),
                ),
                (
                    "support_network",
                    models.CharField(
                        blank=True,
                        choices=[("yes", "Yes"), ("no", "No")],
                        max_length=10,
                        null=True,
                    ),
                ),
                (
                    "access_to_resources",
                    models.CharField(
                        blank=True,
                        choices=[("yes", "Yes"), ("no", "No")],
                        max_length=10,
                        null=True,
                    ),
                ),
                (
                    "leaders_listen_to_women",
                    models.CharField(
                        blank=True,
                        choices=[("yes", "Yes"), ("no", "No")],
                        max_length=10,
                        null=True,
                    ),
                ),
                (
                    "main_drinking_water_source",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("piped_compound", "Piped into compound or house"),
                            ("community_tap", "Community tap/standpipe"),
                            ("protected_spring", "Protected spring"),
                            ("unprotected_spring", "Unprotected spring"),
                            ("well_protected", "Hand-dug well (protected)"),
                            ("well_unprotected", "Hand-dug well (unprotected)"),
                            ("rainwater", "Rainwater collection"),
                            ("surface_water", "Surface water (river, lake, pond)"),
                            ("water_truck", "Water truck/vendor"),
                            ("other", "Other"),
                        ],
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "days_without_water",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("0", "0 days"),
                            ("1_3", "1–3 days"),
                            ("4_7", "4–7 days"),
                            ("more_than_7", "More than 7 days"),
                        ],
                        max_length=20,
                        null=True,
                    ),
                ),
                (
                    "time_to_fetch_water",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("lt_30", "Less than 30 minutes"),
                            ("30_60", "30–60 minutes"),
                            ("gt_60", "More than 1 hour"),
                        ],
                        max_length=20,
                        null=True,
                    ),
                ),
                (
                    "who_collects_water",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(
                            choices=[
                                ("adult_woman", "Adult woman"),
                                ("adult_man", "Adult man"),
                                ("girl_under_15", "Girl under 15"),
                                ("boy_under_15", "Boy under 15"),
                                ("other", "Other"),
                            ],
                            max_length=20,
                        ),
                        blank=True,
                        default=list,
                        size=None,
                    ),
                ),
                (
                    "member",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="annual_data_members",
                        to="cluster_management.member",
                    ),
                ),
            ],
            options={"abstract": False,},
        ),
        migrations.CreateModel(
            name="AnnualSelfHelpGroupData",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "amount_regular_saving",
                    models.DecimalField(decimal_places=2, max_digits=10),
                ),
                ("shg_capital", models.DecimalField(decimal_places=2, max_digits=10)),
                ("num_members_taken_loan", models.PositiveIntegerField()),
                (
                    "smallest_loan_given",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=10, null=True
                    ),
                ),
                (
                    "largest_loan_given",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=10, null=True
                    ),
                ),
                (
                    "amount_loans_written_off",
                    models.DecimalField(decimal_places=2, default=0, max_digits=10),
                ),
                (
                    "amount_invested_in_group_iga",
                    models.DecimalField(decimal_places=2, default=0, max_digits=10),
                ),
                (
                    "group_iga_code1",
                    models.CharField(blank=True, max_length=50, null=True),
                ),
                ("description", models.TextField(blank=True, null=True)),
                (
                    "income_social_savings",
                    models.DecimalField(decimal_places=2, default=0, max_digits=10),
                ),
                (
                    "expenditure_social_savings",
                    models.DecimalField(decimal_places=2, default=0, max_digits=10),
                ),
                (
                    "num_shg_members_social_support",
                    models.PositiveIntegerField(default=0),
                ),
                (
                    "num_people_outside_shg_social_support",
                    models.PositiveIntegerField(default=0),
                ),
                (
                    "num_other_supporting_institutions",
                    models.PositiveIntegerField(default=0),
                ),
                (
                    "min_monthly_personal",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=10, null=True
                    ),
                ),
                ("training_received_per_year", models.PositiveIntegerField(default=0)),
                (
                    "shg_member_health_care_support_amount",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=10, null=True
                    ),
                ),
                (
                    "other_member_health_care_support_amount",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=10, null=True
                    ),
                ),
                (
                    "other_insurance_need_amount",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=10, null=True
                    ),
                ),
                (
                    "other_social_need_amount",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=10, null=True
                    ),
                ),
                (
                    "others",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=10, null=True
                    ),
                ),
                (
                    "training_received_in_year",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(
                            choices=[
                                ("shg_concept", "SHG Concept"),
                                ("saving_and_credit", "Saving and Credit"),
                                ("record_keeping", "Record Keeping"),
                                ("facilitation_skill", "Facilitation Skill"),
                                ("leadership", "Leadership"),
                                ("self_assessment", "Self-Assessment"),
                                ("cla_fla_concept", "CLA & FLA Concept"),
                            ],
                            max_length=50,
                        ),
                        blank=True,
                        default=list,
                        size=None,
                    ),
                ),
                (
                    "group",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="annualGroupData",
                        to="cluster_management.selfhelpgroup",
                    ),
                ),
            ],
            options={"abstract": False,},
        ),
        migrations.CreateModel(
            name="SixMonthData",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "active_iga",
                    models.BooleanField(default=False, verbose_name="Active IGA?"),
                ),
                (
                    "iga_activity_code",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("agriculture", "Agriculture"),
                            ("petty_trading", "Petty Trading"),
                            ("manufacturing", "Manufacturing"),
                            ("service", "Service"),
                            ("others", "Others"),
                        ],
                        max_length=50,
                        null=True,
                        verbose_name="IGA Activity Code",
                    ),
                ),
                (
                    "iga_capital",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=10, null=True
                    ),
                ),
                (
                    "loan_amount_received_shg",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=10,
                        null=True,
                        verbose_name="Loan Amount Received in Period (SHG)",
                    ),
                ),
                (
                    "loan_source_code",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("cla", "CLA"),
                            ("micro_finance", "Micro-finance"),
                            ("bank", "Bank"),
                            ("local_money_lenders", "Local Money Lenders"),
                            ("others", "Others"),
                            ("no_loan_from_other_source", "No Loan From Other Source"),
                        ],
                        max_length=50,
                        null=True,
                        verbose_name="Source (Code)",
                    ),
                ),
                (
                    "loan_amount_from_other_sources",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=10,
                        null=True,
                        verbose_name="Amount from other Source",
                    ),
                ),
                (
                    "purpose_of_loan",
                    models.CharField(
                        choices=[
                            ("iga", "IGA"),
                            ("social_events", "Social Events"),
                            ("furniture", "Furniture"),
                            ("education", "Education"),
                            ("business", "Business"),
                            ("others", "Others"),
                        ],
                        max_length=50,
                    ),
                ),
                (
                    "approx_monthly_personal_income",
                    models.DecimalField(decimal_places=2, max_digits=10),
                ),
                (
                    "approx_monthly_household_income",
                    models.DecimalField(decimal_places=2, max_digits=10),
                ),
                ("meals_per_day_for_children", models.IntegerField()),
                ("meals_per_day_for_adults", models.IntegerField()),
                ("days_diarrhea_children", models.IntegerField()),
                ("days_other_illness_children", models.IntegerField()),
                ("days_diarrhea_others", models.IntegerField()),
                ("days_other_illness_others", models.IntegerField()),
                ("number_of_weekly_meeting_missed", models.IntegerField(default=0)),
                (
                    "member",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="six_month_members",
                        to="cluster_management.member",
                    ),
                ),
            ],
            options={"abstract": False,},
        ),
    ]
